[project]
# This is the name of your project. The first time you publish this
# package, this name will be registered for you. It will determine how
# users can install this project, e.g.:
#
# $ pip install sampleproject
#
# And where it will live on PyPI: https://pypi.org/project/sampleproject/
#
# There are some restrictions on what makes a valid project name
# specification here:
# https://packaging.python.org/specifications/core-metadata/#name
name = "template"  # Required

# Versions should comply with PEP 440:
# https://www.python.org/dev/peps/pep-0440/
#
# For a discussion on single-sourcing the version, see
# https://packaging.python.org/guides/single-sourcing-package-version/
version = "0.1.0"  # Required

# This is a one-line description or tagline of what your project does. This
# corresponds to the "Summary" metadata field:
# https://packaging.python.org/specifications/core-metadata/#summary
description = "Description for <template>"  # Optional

# This is an optional longer description of your project that represents
# the body of text which users will see when they visit PyPI.
#
# Often, this is the same as your README, so you can just read it in from
# that file directly (as we have already done above)
#
# This field corresponds to the "Description" metadata field:
# https://packaging.python.org/specifications/core-metadata/#description-optional
readme = "README.md"  # Optional

# Specify which Python versions you support. In contrast to the
# 'Programming Language' classifiers above, 'pip install' will check this
# and refuse to install the project if the version does not match. See
# https://packaging.python.org/guides/distributing-packages-using-setuptools/#python-requires
requires-python = ">=3.10"

# This is either text indicating the license for the distribution, or a file
# that contains the license
# https://packaging.python.org/en/latest/specifications/core-metadata/#license
license = { text = "MIT" }

# This field adds keywords for your project which will appear on the
# project page. What does your project relate to?
#
# Note that this is a list of additional keywords, separated
# by commas, to be used to assist searching for the distribution in a
# larger catalog.
keywords = []  # Optional

# This should be your name or the name of the organization who originally
# authored the project, and a valid email address corresponding to the name
# listed.
authors = [
	{ name = "InSyncWithFoo", email = "insyncwithfoo@gmail.com" }  # Optional
]

# This should be your name or the names of the organization who currently
# maintains the project, and a valid email address corresponding to the name
# listed.
# Most oftenly no one. Remove this.
maintainers = [
	{ name = "A. Great Maintainer", email = "maintainer@example.com" }  # Optional
]

# Classifiers help users find your project by categorizing it.
#
# For a list of valid classifiers, see https://pypi.org/classifiers/
classifiers = [  # Optional
	# How mature is this project? Common values are
	#   3 - Alpha
	#   4 - Beta
	#   5 - Production/Stable
	"Development Status :: 3 - Alpha",
	
	# Indicate who your project is intended for
	"Intended Audience :: Developers",
	"Topic :: Software Development :: Build Tools",
	
	# Pick your license as you wish
	"License :: OSI Approved :: MIT License",
	
	# Specify the Python versions you support here. In particular, ensure
	# that you indicate you support Python 3. These classifiers are *not*
	# checked by "pip install". See instead "python_requires" below.
	"Programming Language :: Python :: 3",
	"Programming Language :: Python :: 3.10",
	"Programming Language :: Python :: 3.11",
	"Programming Language :: Python :: 3.12",
	# "Programming Language :: Python :: 3.13",
	"Programming Language :: Python :: 3 :: Only",
	
	"Programming Language :: Python :: Implementation :: CPython",
	# "Programming Language :: Python :: Implementation :: PyPy",

	"Typing :: Typed"
]

# This field lists other packages that your project depends on to run.
# Any package you put here will be installed by pip when your project is
# installed, so they must be valid existing projects.
#
# For an analysis of this field vs pip's requirements files see:
# https://packaging.python.org/discussions/install-requires-vs-requirements/
dependencies = [
	# Uncomment the following only when type hints are needed at runtime.
	# Otherwise, use `if TYPE_CHECKING`.
	# "typing_extensions~=4.9.0"  # Always use latest
]

# List additional groups of dependencies here (e.g. development
# dependencies). Users will be able to install these using the "extras"
# syntax, for example:
#
#   $ pip install sampleproject[dev]
#
# Similar to `dependencies` above, these must be valid existing
# projects.
[project.optional-dependencies]
dev = [  # Minimum dependencies. Always latest.
	"hatch~=1.9.3",
	"hypothesis~=6.99.2",
	"mypy~=1.8.0",
	"pyright~=1.1.347",
	"pytest~=8.1.0",
	"pytest-cov~=4.1.0",
	"ruff~=0.3.0",
	"tox~=4.14.0"
]
docs = [  # Remove if docs are not needed
	"sphinx~=7.2.6",
	"furo~=2024.1.29"
]

# List URLs that are relevant to your project
#
# This field corresponds to the "Project-URL" and "Home-Page" metadata fields:
# https://packaging.python.org/specifications/core-metadata/#project-url-multiple-use
# https://packaging.python.org/specifications/core-metadata/#home-page-optional
#
# Examples listed include a pattern for specifying where the package tracks
# issues, where the source is hosted, where to say thanks to the package
# maintainers, and where to support the project financially. The key is
# what's used to render the link text on PyPI.
[project.urls]  # Optional
"Homepage" = "https://github.com/InSyncWithFoo/<template>"  # Use kebab-case
"Documentation" = "https://<template>.readthedocs.io/"

# The following would provide a command line executable called `sample`
# which executes the function `main` from this package when invoked.
[project.scripts]  # Optional
sample = "sample:main"

# For other related fields, see:
# * https://packaging.python.org/en/latest/specifications/pyproject-toml/#entry-points
# * https://hatch.pypa.io/latest/config/metadata/

[build-system]
# Avoid setuptools.
requires = ["hatchling"]
build-backend = "hatchling.build"

# Tools that support pyproject.toml must be configured using pyproject.toml,
# unless that tool has an astonishingly bad interface for specifying
# configurations using this file (looking at you, pytest and tox!).

[tool.hatch.build.targets.sdist]
# https://hatch.pypa.io/latest/plugins/builder/sdist/
# Also https://hatch.pypa.io/latest/plugins/builder/wheel/
# On new machines:
#   $ hatch config set dirs.env.virtual ./.hatchenvs
include = ["src"]

[tool.hatch.envs.docs.scripts]
start = "sphinx-quickstart docs"
build = "sphinx-build -M html docs/source docs/build"

[tool.pytest.ini_options]
# https://docs.pytest.org/en/stable/reference/customize.html
# --cov interferes with PyCharm's debugger. Remove as necessary.
addopts = "--strict-markers --cov=<template> --cov-report=html"
testpaths = ["tests"]

[tool.coverage.report]
# https://coverage.readthedocs.io/en/latest/
# https://coverage.readthedocs.io/en/latest/excluding.html
exclude_also = [
	# General
	
	"^([^\\S\n]+)@(?:overload|abstractmethod)",
	"if TYPE_CHECKING:",
	
	# Project
	
	# ...
]

[tool.mypy]
# https://mypy.readthedocs.io/en/stable/config_file.html
files = "src/**/*.py"
strict = true

[tool.pyright]
# https://github.com/microsoft/pyright/blob/main/docs/configuration.md
include = ["src"]
strict = ["src"]
pythonPlatform = "All"
typeCheckingMode = "strict"

[tool.ruff]
# https://docs.astral.sh/ruff/configuration/
# https://docs.astral.sh/ruff/rules/
include = ["src/**"]
exclude = ["tests/**"]
line-length = 80
target-version = "py310"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
	### General
	
	"ANN101",    # missing-type-self
	"ANN102",    # missing-type-cls
	
	"D200",      # fits-on-one-line
	"D202",      # no-blank-line-after-function
	"D205",      # blank-line-after-summary
	"D206",      # indent-with-spaces
	"D212",      # multi-line-summary-first-line
	"D300",      # triple-single-quotes
	"D401",      # non-imperative-mood
	
	"ERA001",    # commented-out-code
	
	"I001",      # unsorted-imports
	
	"N818",      # error-suffix-on-exception-name
	
	"PIE790",    # unnecessary-placeholder
	
	"Q000",      # bad-quotes-inline-string
	"Q001",      # bad-quotes-multiline-string
	"Q002",      # bad-quotes-docstring
	
	"W191",      # tab-indentation
	"W291",      # trailing-whitespace
	"W293",      # blank-line-with-whitespace
	
	### Project
	
	# ...
]
